apply plugin: 'maven-publish'
println("--------${project.name}：Maven Publish Gradle--------")
//远程Maven仓库的URL Release
def MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']
//远程Maven仓库用户名
def USER_NAME = rootProject.ext.mavenRepo['userName']
//远程Maven仓库密码
def PASSWORD = rootProject.ext.mavenRepo['password']
// 唯一标识 每个组件都要指定
def GROUP = rootProject.ext.jdispatcherJitpackGroup
// 项目名称 根据包名取最后的路径名称
def ARTIFACT_ID = project.name
// 版本号 每个组件都要指定
def VERSION = rootProject.ext.jdispatcherPublishVersion
//远程Maven仓库的URL
def URL = rootProject.ext.jdispatcherLocalRepo
println("dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION")
println("URL: $URL")

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                if (plugins.hasPlugin('android-library')) {
                    from components.release
                } else if (plugins.hasPlugin('java')) {
                    from components.java
                    jar.preserveFileTimestamps = false
                    jar.reproducibleFileOrder = true
                }
                groupId = GROUP
                artifactId = ARTIFACT_ID
                version = VERSION
//                artifact androidJavadocJar
//                artifact javaSourcesJar
            }
        }
        repositories {
            maven {
                url = URL
//                credentials {
//                    username USER_NAME
//                    password PASSWORD
//                }
            }
        }
    }
}

task androidJavadoc(type: Javadoc) {
    if (plugins.hasPlugin('android-library')) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }
    } else {
        source = sourceSets.main.allJava
        classpath += configurations.runtimeClasspath
        classpath += configurations.compileClasspath
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    options.encoding 'utf-8'
    options {
        addStringOption 'docencoding', 'utf-8'
        addStringOption 'charset', 'utf-8'
        links 'https://docs.oracle.com/javase/8/docs/api/'
        links 'https://d.android.com/reference'
        links 'https://developer.android.com/reference/androidx/'
    }
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    archiveClassifier.set('javadoc')
    from androidJavadoc.destinationDir
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

task javaSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (plugins.hasPlugin('android-library')) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.allSource
    }
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

//发布到本地仓库的任务
task cleanBuildPublishLocal(type: GradleBuild) {
    tasks = ['clean', 'build', 'publishToMavenLocal']
}

//发布到远程仓库的任务
task cleanBuildPublish(type: GradleBuild) {
    tasks = ['clean', 'build', 'publish']
}

//https://petrakeas.medium.com/publish-a-multi-module-java-android-library-to-maven-central-github-ci-automation-at-2021-4f98a311df2a






